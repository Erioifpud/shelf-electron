/**
 * @fileoverview
 * Contains the logic for generating the `PluginApiMap` TypeScript definition file.
 * This file enables type-safe inter-plugin communication via `context.link()`.
 * It gracefully handles projects with no external dependencies.
 */

import * as fs from 'node:fs/promises';
import * as path from 'node:path';
import { ProjectConfig } from './project-config.js';
import { PluginDiscovery } from './plugin-discovery.js';
import chalk from 'chalk';

/**
 * Orchestrates the generation of the `anvil.d.ts` file, which provides
 * strong typing for the `context.link()` method in the Anvil framework.
 */
export class DtsGenerator {
  private readonly projectConfig: ProjectConfig;
  private readonly pluginDiscovery: PluginDiscovery;

  /**
   * Creates an instance of DtsGenerator.
   * @param rootPath The absolute path to the project's root directory.
   */
  constructor(rootPath: string) {
    this.projectConfig = new ProjectConfig(rootPath);
    this.pluginDiscovery = new PluginDiscovery(rootPath);
  }

  /**
   * Performs the complete generation process.
   * - Discovers dependency plugins.
   * - Filters out the current project's plugin.
   * - Generates the d.ts content.
   * - Writes the file to the configured output path.
   *
   * @param outputPath The path relative to the project root for the output file,
   *                   as provided by the CLI options.
   */
  async generate(outputPath: string): Promise<void> {
    try {
      const discoveredPlugins = await this.pluginDiscovery.discoverPlugins();
      const currentManifest = await this.projectConfig.getManifest();
      
      // Filter out the current plugin from the list to only include true dependencies.
      const dependencyPlugins = discoveredPlugins.filter(p => p.name !== currentManifest.name);

      if (dependencyPlugins.length === 0) {
        console.log(chalk.green("‚úÖ No external plugin dependencies found. The 'anvil.d.ts' file is not needed."));
        return; // Exit gracefully as there's nothing to do.
      }
      
      console.log(`üîé Found ${chalk.bold(dependencyPlugins.length)} dependencies to generate type definitions for.`);

      const entries = dependencyPlugins.map(
        (plugin) =>
          // Generates a line like: 'my-db-plugin': PluginApi<typeof import('my-db-plugin').default>;
          `    '${plugin.name}': PluginApi<typeof import('${plugin.name}').default>;`
      );

      const content = `/**
 * @fileoverview This file is auto-generated by the 'elep-dev dts' command.
 *
 * !!! DO NOT EDIT THIS FILE MANUALLY !!!
 *
 * This file provides type definitions for the APIs of your plugin's dependencies,
 * enabling robust, type-safe inter-plugin communication. When you use the
 * \`context.link('dependency-name')\` method in your plugin, TypeScript will
 * automatically infer the correct API shape and provide autocompletion.
 *
 * To regenerate this file, run 'npx elep-dev dts' in your terminal.
 */
import type { PluginApi } from '@eleplug/anvil';

declare module '@eleplug/anvil' {
  interface PluginApiMap {
${entries.join('\n')}
  }
}
`;

      const finalPath = await this.projectConfig.getDtsOutputPath(outputPath);

      await fs.mkdir(path.dirname(finalPath), { recursive: true });
      await fs.writeFile(finalPath, content, 'utf-8');

      const relativeFinalPath = path.relative(this.projectConfig.rootPath, finalPath);
      console.log(chalk.green(`‚úÖ Type definitions successfully generated at: ${chalk.cyan(relativeFinalPath)}`));

    } catch (error: any) {
      console.error(chalk.red(`‚ùå Error generating type definitions: ${error.message}`));
      process.exit(1);
    }
  }
}